!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CNTP_PORT	cprotocol.h	17;"	d
CONFIG_INIT	config.h	3;"	d
C_ETHLEN	cprotocol.h	19;"	d
C_HLEN	cprotocol.h	22;"	d
C_IPLEN	cprotocol.h	20;"	d
C_UDPLEN	cprotocol.h	21;"	d
DATA_PORT	cprotocol.h	14;"	d
INF1	config.h	22;"	d
INF2	config.h	24;"	d
INFADDR1	config.h	23;"	d
INFADDR2	config.h	25;"	d
KBLU	color.h	5;"	d
KCYN	color.h	7;"	d
KGRN	color.h	3;"	d
KMAG	color.h	6;"	d
KNRM	color.h	1;"	d
KRED	color.h	2;"	d
KWHT	color.h	8;"	d
KYEL	color.h	4;"	d
LOGFILE	globals.h	/^FILE *LOGFILE;$/;"	v
NACK_PORT	cprotocol.h	15;"	d
NODE1_IP	cprotocol.h	10;"	d
NODE1_MAC	cprotocol.h	6;"	d
NODE2_IP	cprotocol.h	11;"	d
NODE2_MAC	cprotocol.h	7;"	d
NODE3_IP	cprotocol.h	12;"	d
NODE3_MAC	cprotocol.h	8;"	d
NUM_OF_INF	config.h	12;"	d
RESET	color.h	9;"	d
ROUTER_MAC	cprotocol.h	5;"	d
SNAP_LEN	config.h	21;"	d
add_to_hash	hashl.c	/^void add_to_hash(dict_node *h)$/;"	f
addr	config.h	/^    uint16_t addr;$/;"	m	struct:interface
config	config.h	/^struct config {$/;"	s
config	globals.h	/^    struct config config;$/;"	m	struct:globals	typeref:struct:globals::config
configure_capture	packet_sniff.c	/^void *configure_capture(void *args)$/;"	f
create_socket	sock_details.c	/^int create_socket()$/;"	f
custeth	cprotocol.h	/^    struct custom_ethernet custeth;$/;"	m	struct:custom_header	typeref:struct:custom_header::custom_ethernet
custip	cprotocol.h	/^    struct custom_ip custip;$/;"	m	struct:custom_header	typeref:struct:custom_header::custom_ip
custom_ethernet	cprotocol.h	/^struct custom_ethernet {$/;"	s
custom_header	cprotocol.h	/^struct custom_header {$/;"	s
custom_ip	cprotocol.h	/^struct custom_ip {$/;"	s
custom_udp	cprotocol.h	/^struct custom_udp {$/;"	s
custudp	cprotocol.h	/^    struct custom_udp custudp;$/;"	m	struct:custom_header	typeref:struct:custom_header::custom_udp
data	cprotocol.h	/^struct data {$/;"	s
dest_ip	cprotocol.h	/^    uint16_t dest_ip;$/;"	m	struct:custom_ip
dest_mac	cprotocol.h	/^    uint32_t dest_mac;$/;"	m	struct:data
dict_node	globals.h	/^} dict_node;$/;"	t	typeref:struct:hashl
errbuf	globals.h	/^char errbuf[PCAP_ERRBUF_SIZE];$/;"	v
find_in_hash	hashl.c	/^dict_node *find_in_hash(int key)$/;"	f
globals	globals.c	/^struct globals globals = {$/;"	v	typeref:struct:globals
globals	globals.h	/^struct globals {$/;"	s
hashl	globals.h	/^    dict_node *hashl;$/;"	m	struct:globals
hashl	globals.h	/^typedef struct hashl {$/;"	s
hh	globals.h	/^    UT_hash_handle hh;$/;"	m	struct:hashl
inf	globals.h	/^    struct interface inf[NUM_OF_INF];$/;"	m	struct:globals	typeref:struct:globals::interface
inf_name	config.h	/^    char inf_name[64];$/;"	m	struct:interface
interface	config.h	/^struct interface {$/;"	s
is_cntp	filter.c	/^bool is_cntp(const unsigned char *packet,void *args)$/;"	f
key	globals.h	/^    int key;$/;"	m	struct:hashl
next_hop	cprotocol.h	/^    uint16_t next_hop;$/;"	m	struct:custom_ethernet
packet_capture	packet_sniff.c	/^void packet_capture(unsigned char *args,const struct pcap_pkthdr *header, const unsigned char *packet)$/;"	f
packet_len	config.h	/^    uint16_t packet_len;$/;"	m	struct:config
packet_print	packet_print.c	/^void packet_print(const struct pcap_pkthdr *header,const u_char *packet)$/;"	f
pattern	cprotocol.h	/^struct pattern {$/;"	s
port	cprotocol.h	/^    uint16_t port;$/;"	m	struct:custom_udp
rtt	config.h	/^    uint16_t rtt;$/;"	m	struct:config
sock	config.h	/^    int sock;$/;"	m	struct:interface
src_ip	cprotocol.h	/^    uint16_t src_ip;$/;"	m	struct:custom_ip
src_mac	cprotocol.h	/^    uint32_t src_mac;$/;"	m	struct:data
thrd	config.h	/^    pthread_t thrd;$/;"	m	struct:interface
value	cprotocol.h	/^    uint64_t value;$/;"	m	struct:pattern
value	globals.h	/^    char value[100];$/;"	m	struct:hashl
